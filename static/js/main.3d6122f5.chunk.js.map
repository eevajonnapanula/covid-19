{"version":3,"sources":["components/Footer.tsx","components/Charts/BarChart.tsx","components/Charts/PieChart.tsx","components/Charts/LineChart.tsx","utils/dataUtils.ts","components/Charts/GroupChart.tsx","components/Charts/Charts.tsx","components/NumberBox.tsx","components/Numbers.tsx","graphql/queries.ts","components/Root.tsx","graphql/apolloSetup.ts","App.tsx","index.tsx"],"names":["StyledFooter","styled","footer","Footer","id","values","HSLink","href","GithubLink","BarChart","data","title","labelsX","map","item","x","labelsY","y","maxY","length","Math","max","formatMessage","useIntl","theme","VictoryTheme","grayscale","domainPadding","containerComponent","responsive","padding","bottom","style","axis","stroke","grid","tickFormat","t","dependentAxis","tickLabelComponent","fontSize","fill","tickValues","textAnchor","angle","maxDomain","labels","toString","parent","border","animate","duration","labelComponent","dy","PieChart","name","orientation","gutter","filter","colorScale","itemsPerRow","height","padAngle","innerRadius","datum","events","target","eventHandlers","onClick","mutation","props","onMouseOver","onMouseLeave","LineChart","interpolation","top","pointerLength","flyoutStyle","color","width","size","dates","eachDayOfInterval","start","subDays","Date","end","formatDataToXAndY","arr","value","reduce","acc","curr","undefined","find","push","formatDatesToXAndY","date","format","isSameDay","parseISO","GroupChart","confirmed","labelsConfirmedY","useState","setDate","setConfirmed","deaths","setDeaths","recovered","setRecovered","maxConfirmedY","onActivated","points","confirmedPoint","childName","deathPoint","recoveredPoint","handleActivate","voronoiDimension","Charts","infectionSources","setiInfectionSources","countries","setCountries","infectionsPerDay","setInfectionsPerDay","totalInfectionsPerDay","setTotalInfectionsPerDay","useEffect","formattedDistricts","formattedCountries","formattedInfectionsPerDay","formattedTotalInfectionsPerDay","index","formatTotalInfections","Wrapper","div","Number","NumberBox","number","label","Rows","Row","Numbers","all","today","GET_DATA","gql","Header","header","Main","main","ButtonGroup","GroupButton","button","active","NotificationBox","Root","changeLocale","locale","useQuery","handleLocaleChange","isToday","cache","InMemoryCache","restLink","RestLink","uri","client","ApolloClient","link","translations","en","fi","App","localeFromLocalStorage","localStorage","getItem","localeToSet","setLocale","messages","setItem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3d6122f5.chunk.js","sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport styled from 'styled-components';\n\nconst StyledFooter = styled.footer`\n  font-size: 0.85rem;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  @media only screen and (min-width: 768px) {\n    width: 50rem;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n`;\n\nconst Footer = () => (\n  <StyledFooter>\n    <p>\n      <FormattedMessage\n        id=\"footer.data-source\"\n        values={{\n          HSLink: (\n            <a href=\"https://github.com/HS-Datadesk/koronavirus-avoindata\">\n              Helsingin Sanomat\n            </a>\n          ),\n        }}\n      />\n    </p>\n    <p>\n      <FormattedMessage\n        id=\"footer.made-by\"\n        values={{\n          GithubLink: (\n            <a href=\"https://github.com/eevajonnapanula/covid-19\">Github</a>\n          ),\n        }}\n      />\n    </p>\n  </StyledFooter>\n);\n\nexport default Footer;\n","import React, { FunctionComponent } from 'react';\nimport {\n  VictoryTheme,\n  VictoryChart,\n  VictoryBar,\n  VictoryAxis,\n  VictoryContainer,\n  VictoryPortal,\n  VictoryLabel,\n} from 'victory';\nimport { XAndY } from '../../interfaces';\nimport { useIntl } from 'react-intl';\n\ninterface BarChartProps {\n  data: XAndY[];\n  title: string;\n}\n\nconst BarChart: FunctionComponent<BarChartProps> = ({ data, title }) => {\n  const labelsX = data.map(item => item.x);\n  const labelsY = data.map(item => item.y);\n\n  const maxY = labelsY.length > 0 ? Math.max(...labelsY) : 0;\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <h2>{title}</h2>\n      {data.length > 0 && (\n        <>\n          <VictoryChart\n            theme={VictoryTheme.grayscale}\n            domainPadding={20}\n            containerComponent={<VictoryContainer responsive={true} />}\n            padding={{ bottom: 150 }}\n          >\n            <VictoryAxis\n              style={{\n                axis: { stroke: '#e4e3d3' },\n                grid: { stroke: 'rgba(188, 187, 174, 0.3)' },\n              }}\n              tickFormat={t => `${t} ${formatMessage({ id: 'labels.pcs' })}`}\n              dependentAxis={true}\n              tickLabelComponent={\n                <VictoryPortal>\n                  <VictoryLabel style={{ fontSize: '12px', fill: '#e4e3d3' }} />\n                </VictoryPortal>\n              }\n            />\n            <VictoryAxis\n              style={{ axis: { stroke: '#e4e3d3' } }}\n              tickValues={labelsX}\n              tickLabelComponent={\n                <VictoryPortal>\n                  <VictoryLabel\n                    style={{\n                      textAnchor: 'end',\n                      fontSize: '12px',\n                      fill: '#e4e3d3',\n                    }}\n                    angle={-75}\n                  />\n                </VictoryPortal>\n              }\n            />\n            <VictoryBar\n              maxDomain={{ y: maxY + 20 }}\n              data={data}\n              labels={labelsY.map(item => item.toString())}\n              style={{\n                parent: {\n                  border: '1px solid #ccc',\n                },\n                data: { fill: '#23c9ff' },\n                labels: {\n                  fontSize: 15,\n                  fill: '#e4e3d3',\n                  padding: 15,\n                },\n              }}\n              animate={{\n                duration: 2000,\n              }}\n              labelComponent={<VictoryLabel dy={0} />}\n            />\n          </VictoryChart>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default BarChart;\n","import React, { FunctionComponent } from 'react';\nimport {\n  VictoryTheme,\n  VictoryContainer,\n  VictoryPie,\n  VictoryPortal,\n  VictoryLabel,\n  VictoryLegend,\n} from 'victory';\nimport { XAndY } from '../../interfaces';\n\ninterface PieChartProps {\n  data: XAndY[];\n  title: string;\n}\n\nconst PieChart: FunctionComponent<PieChartProps> = ({ data, title }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      <VictoryLegend\n        name=\"legend\"\n        orientation=\"horizontal\"\n        gutter={20}\n        data={data\n          .filter(item => item.x)\n          .map(item => {\n            return { name: `${item.x}: ${item.y}` };\n          })}\n        colorScale={[\n          '#23c9ff',\n          '#f7b267',\n          '#a93f55',\n          '#6B2D5C',\n          '#D7A7B1',\n          '#476774',\n          '#FBF2C0',\n        ]}\n        style={{ labels: { fill: '#e4e3d3' } }}\n        itemsPerRow={5}\n        height={50}\n      />\n      <VictoryPie\n        name=\"bar\"\n        padAngle={2}\n        innerRadius={100}\n        data={data.filter(item => item.x)}\n        colorScale={[\n          '#23c9ff',\n          '#f7b267',\n          '#a93f55',\n          '#6B2D5C',\n          '#D7A7B1',\n          '#476774',\n          '#FBF2C0',\n        ]}\n        containerComponent={<VictoryContainer responsive={true} />}\n        theme={VictoryTheme.grayscale}\n        style={{ labels: { fill: 'transparent' } }}\n        labels={({ datum }) => `${datum.x}: ${datum.y}`}\n        labelComponent={\n          <VictoryPortal>\n            <VictoryLabel />\n          </VictoryPortal>\n        }\n        events={[\n          {\n            target: 'data',\n            eventHandlers: {\n              onClick: () => {\n                return [\n                  {\n                    target: 'labels',\n                    mutation: props => {\n                      const fill = props.style && props.style.fill;\n                      return fill === 'transparent'\n                        ? { style: { fill: '#e4e3d3' } }\n                        : { style: { fill: 'transparent' } };\n                    },\n                  },\n                ];\n              },\n              onMouseOver: () => {\n                return [\n                  {\n                    target: 'labels',\n                    mutation: () => {\n                      return { style: { fill: '#e4e3d3' } };\n                    },\n                  },\n                ];\n              },\n              onMouseLeave: () => {\n                return [\n                  {\n                    target: 'labels',\n                    mutation: () => {\n                      return { style: { fill: 'transparent' } };\n                    },\n                  },\n                ];\n              },\n            },\n          },\n        ]}\n      />\n    </>\n  );\n};\n\nexport default PieChart;\n","import React, { FunctionComponent } from 'react';\nimport {\n  VictoryTheme,\n  VictoryChart,\n  VictoryLine,\n  VictoryLabel,\n  VictoryAxis,\n  VictoryVoronoiContainer,\n  VictoryPortal,\n  VictoryTooltip,\n  VictoryScatter,\n} from 'victory';\nimport { XAndY } from '../../interfaces';\nimport { useIntl } from 'react-intl';\n\ninterface LineChartProps {\n  data: XAndY[];\n  title: string;\n}\n\nconst LineChart: FunctionComponent<LineChartProps> = ({ data, title }) => {\n  const labels = data.map(item => item.y);\n  const { formatMessage } = useIntl();\n  return (\n    <>\n      <h2>{title}</h2>\n      <VictoryChart\n        theme={VictoryTheme.grayscale}\n        domainPadding={20}\n        containerComponent={<VictoryVoronoiContainer responsive={true} />}\n        padding={{ bottom: 100 }}\n      >\n        <VictoryAxis\n          style={{\n            axis: { stroke: '#e4e3d3' },\n            grid: { stroke: 'rgba(188, 187, 174, 0.3)' },\n          }}\n          tickFormat={t => `${t} ${formatMessage({ id: 'labels.pcs' })}`}\n          dependentAxis={true}\n          tickLabelComponent={\n            <VictoryPortal>\n              <VictoryLabel style={{ fontSize: '12px', fill: '#e4e3d3' }} />\n            </VictoryPortal>\n          }\n        />\n        <VictoryAxis\n          style={{ axis: { stroke: '#e4e3d3' } }}\n          tickValues={labels}\n          tickLabelComponent={\n            <VictoryPortal>\n              <VictoryLabel\n                style={{ textAnchor: 'end', fontSize: '12px', fill: '#e4e3d3' }}\n                angle={-75}\n              />\n            </VictoryPortal>\n          }\n        />\n        <VictoryLine\n          interpolation=\"natural\"\n          data={data}\n          labels={labels}\n          style={{\n            parent: {\n              border: '1px solid #ccc',\n            },\n            data: { stroke: '#23c9ff' },\n            labels: {\n              fontSize: 15,\n              fill: '#e4e3d3',\n              padding: 15,\n            },\n          }}\n          animate={{\n            duration: 2000,\n          }}\n          padding={{ top: 20, bottom: 60 }}\n          labelComponent={\n            <VictoryTooltip\n              pointerLength={0}\n              flyoutStyle={{\n                fill: 'transparent',\n                stroke: 'transparent',\n                color: '#e4e3d3',\n              }}\n              width={5}\n              height={5}\n            />\n          }\n        />\n        <VictoryScatter\n          animate={{\n            duration: 2000,\n          }}\n          data={data}\n          size={2}\n          style={{ data: { fill: '#23c9ff' } }}\n        />\n      </VictoryChart>\n    </>\n  );\n};\n\nexport default LineChart;\n","import isSameDay from 'date-fns/isSameDay';\nimport parseISO from 'date-fns/parseISO';\nimport format from 'date-fns/format';\nimport eachDayOfInterval from 'date-fns/eachDayOfInterval';\nimport subDays from 'date-fns/subDays';\nimport { DataItem, XAndY } from '../interfaces';\n\nconst dates = eachDayOfInterval({\n  start: subDays(new Date(), 14),\n  end: new Date(),\n});\n\nexport const formatDataToXAndY = (arr: DataItem[], value: string) => {\n  return arr.reduce((acc: XAndY[], curr: DataItem) => {\n    const hasValue = acc.find(item => {\n      return item.x === curr[value];\n    });\n\n    if (hasValue !== undefined) {\n      return acc.map((item: XAndY) => {\n        if (item.x === curr[value]) {\n          return {\n            ...item,\n            y: item.y + 1,\n          };\n        }\n\n        return item;\n      });\n    } else {\n      acc.push({ x: curr[value], y: 1 });\n    }\n    return acc;\n  }, []);\n};\n\nexport const formatDatesToXAndY = (data: DataItem[]) => {\n  return dates.map(date => {\n    return {\n      x: format(date, 'dd.MM'),\n      y: data.filter(item => isSameDay(parseISO(item.date), date)).length,\n    };\n  });\n};\n\nexport const formatTotalInfections = (data: DataItem[]) => {\n  return dates.reduce((acc: XAndY[], curr: Date, index: number) => {\n    if (index === 0) {\n      acc.push({\n        x: format(curr, 'dd.MM'),\n        y: data.filter(item => isSameDay(parseISO(item.date), curr)).length,\n      });\n    } else {\n      acc.push({\n        x: format(curr, 'dd.MM'),\n        y:\n          acc[index - 1].y +\n          data.filter(item => isSameDay(parseISO(item.date), curr)).length,\n      });\n    }\n    return acc;\n  }, []);\n};\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  VictoryTheme,\n  VictoryChart,\n  VictoryBar,\n  VictoryAxis,\n  VictoryPortal,\n  VictoryLabel,\n  VictoryStack,\n  VictoryLegend,\n  VictoryVoronoiContainer,\n} from 'victory';\nimport { DataInXAndY } from '../../interfaces';\nimport { useIntl } from 'react-intl';\n\ninterface GroupChartProps {\n  data: DataInXAndY;\n  title: string;\n}\n\nconst getmaxConfirmedY = (labels: number[]) =>\n  labels.length > 0 ? Math.max(...labels) : 0;\n\nconst GroupChart: FunctionComponent<GroupChartProps> = ({ data, title }) => {\n  const { formatMessage } = useIntl();\n  const labelsX = data.confirmed.map(item => item.x);\n  const labelsConfirmedY = data.confirmed.map(item => item.y);\n  const [date, setDate] = useState('');\n  const [confirmed, setConfirmed] = useState('');\n  const [deaths, setDeaths] = useState('');\n  const [recovered, setRecovered] = useState('');\n  const maxConfirmedY = getmaxConfirmedY(labelsConfirmedY);\n\n  const handleActivate = (points: any) => {\n    const confirmedPoint = points.find(\n      (item: any) => item.childName === 'bar-confirmed'\n    );\n    const deathPoint = points.find(\n      (item: any) => item.childName === 'bar-deaths'\n    );\n    const recoveredPoint = points.find(\n      (item: any) => item.childName === 'bar-recovered'\n    );\n\n    setConfirmed(confirmedPoint.y);\n    setDeaths(deathPoint.y);\n    setRecovered(recoveredPoint.y);\n    setDate(confirmedPoint.x);\n  };\n  return (\n    <>\n      <h2>{title}</h2>\n      {data.confirmed.length > 0 && (\n        <>\n          <VictoryChart\n            theme={VictoryTheme.grayscale}\n            domainPadding={20}\n            padding={{ bottom: 100 }}\n            containerComponent={\n              <VictoryVoronoiContainer\n                onActivated={points => handleActivate(points)}\n                voronoiDimension=\"x\"\n              />\n            }\n          >\n            <VictoryLegend\n              name=\"legend\"\n              title={`${formatMessage({ id: 'labels.date' })} ${date}`}\n              orientation=\"vertical\"\n              height={50}\n              gutter={10}\n              data={[\n                {\n                  name: `${formatMessage({\n                    id: 'labels.confirmed',\n                  })} ${confirmed}`,\n                },\n                {\n                  name: `${formatMessage({\n                    id: 'labels.recovered',\n                  })} ${recovered}`,\n                },\n                {\n                  name: `${formatMessage({\n                    id: 'labels.deaths',\n                  })} ${deaths}`,\n                },\n              ]}\n              colorScale={['#23c9ff', '#f7b267', '#a93f55']}\n              style={{\n                labels: { fill: '#e4e3d3', fontSize: 10 },\n                title: { fill: '#e4e3d3', fontSize: 10 },\n              }}\n            />\n            <VictoryAxis\n              style={{\n                axis: { stroke: '#e4e3d3' },\n                grid: { stroke: 'rgba(188, 187, 174, 0.3)' },\n              }}\n              tickFormat={t => `${t} ${formatMessage({ id: 'labels.pcs' })}`}\n              dependentAxis={true}\n              tickLabelComponent={\n                <VictoryPortal>\n                  <VictoryLabel style={{ fontSize: '12px', fill: '#e4e3d3' }} />\n                </VictoryPortal>\n              }\n            />\n            <VictoryAxis\n              tickValues={labelsX}\n              style={{ axis: { stroke: '#e4e3d3' } }}\n              tickLabelComponent={\n                <VictoryPortal>\n                  <VictoryLabel\n                    style={{\n                      textAnchor: 'end',\n                      fontSize: '12px',\n                      fill: '#e4e3d3',\n                    }}\n                    angle={-75}\n                  />\n                </VictoryPortal>\n              }\n            />\n            <VictoryStack\n              colorScale={[\n                '#23c9ff',\n                '#a93f55',\n                '#f7b267',\n                '#6B2D5C',\n                '#D7A7B1',\n              ]}\n            >\n              <VictoryBar\n                name=\"bar-confirmed\"\n                maxDomain={{ y: maxConfirmedY + 20 }}\n                data={data.confirmed}\n                animate={{\n                  duration: 2000,\n                }}\n                style={{\n                  labels: {\n                    fill: '#e4e3d3',\n                  },\n                }}\n              />\n              <VictoryBar\n                name=\"bar-deaths\"\n                maxDomain={{ y: maxConfirmedY + 20 }}\n                data={data.deaths}\n                style={{\n                  labels: {\n                    fill: '#e4e3d3',\n                  },\n                }}\n                animate={{\n                  duration: 2000,\n                }}\n              />\n              <VictoryBar\n                name=\"bar-recovered\"\n                maxDomain={{ y: maxConfirmedY + 20 }}\n                data={data.recovered}\n                style={{\n                  labels: {\n                    fill: '#e4e3d3',\n                  },\n                }}\n                animate={{\n                  duration: 2000,\n                }}\n              />\n            </VictoryStack>\n          </VictoryChart>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default GroupChart;\n","import React, { useState, useEffect, FunctionComponent } from 'react';\nimport BarChart from './BarChart';\nimport PieChart from './PieChart';\nimport LineChart from './LineChart';\nimport {\n  formatDataToXAndY,\n  formatDatesToXAndY,\n  formatTotalInfections,\n} from '../../utils/dataUtils';\nimport { useIntl } from 'react-intl';\nimport GroupChart from './GroupChart';\nimport { Data, XAndY, DataInXAndY } from '../../interfaces';\n\ninterface ChartsProps {\n  data: Data;\n}\n\nconst Charts: FunctionComponent<ChartsProps> = ({ data }) => {\n  const { formatMessage } = useIntl();\n\n  const [infectionSources, setiInfectionSources] = useState<XAndY[]>([]);\n  const [countries, setCountries] = useState<XAndY[]>([]);\n  const [infectionsPerDay, setInfectionsPerDay] = useState<DataInXAndY>({\n    confirmed: [],\n    deaths: [],\n    recovered: [],\n  });\n  const [totalInfectionsPerDay, setTotalInfectionsPerDay] = useState<XAndY[]>(\n    []\n  );\n\n  useEffect(() => {\n    if (data) {\n      const formattedDistricts = formatDataToXAndY(\n        data.confirmed,\n        'healthCareDistrict'\n      );\n      setiInfectionSources(formattedDistricts);\n      const formattedCountries = formatDataToXAndY(\n        data.confirmed,\n        'infectionSourceCountry'\n      );\n      setCountries(formattedCountries);\n      const formattedInfectionsPerDay = {\n        confirmed: formatDatesToXAndY(data.confirmed),\n        deaths: formatDatesToXAndY(data.deaths),\n        recovered: formatDatesToXAndY(data.recovered),\n      };\n      setInfectionsPerDay(formattedInfectionsPerDay);\n      const formattedTotalInfectionsPerDay = formatTotalInfections(\n        data.confirmed\n      );\n      setTotalInfectionsPerDay(formattedTotalInfectionsPerDay);\n    }\n  }, [data]);\n\n  const renderCharts = () => {\n    return (\n      <>\n        <LineChart\n          data={totalInfectionsPerDay}\n          title={formatMessage({ id: 'charts.totalInfectionsPerDay' })}\n        />\n        <GroupChart\n          data={infectionsPerDay}\n          title={formatMessage({ id: 'charts.infectionsPerDay' })}\n        />\n        <BarChart\n          data={infectionSources}\n          title={formatMessage({ id: 'charts.confirmedPerDistrict' })}\n        />\n        <PieChart\n          data={countries}\n          title={formatMessage({ id: 'charts.confirmedPerCountry' })}\n        />\n      </>\n    );\n  };\n  return <>{data ? renderCharts() : <div>loading</div>}</>;\n};\n\nexport default Charts;\n","import React, { FunctionComponent } from 'react';\nimport styled from 'styled-components';\n\ninterface NumberBoxProps {\n  number: string | number;\n  label: string;\n}\n\nconst Wrapper = styled.div`\n  min-width: 10rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #222139;\n  padding: 0.5rem;\n`;\n\nconst Number = styled.div`\n  font-size: 3rem;\n`;\n\nconst NumberBox: FunctionComponent<NumberBoxProps> = ({ number, label }) => (\n  <Wrapper>\n    <Number>{number}</Number>\n    <p>{label}</p>\n  </Wrapper>\n);\n\nexport default NumberBox;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport styled from 'styled-components';\n\nimport NumberBox from './NumberBox';\n\ninterface NumbersObject {\n  all: number;\n  today: number;\n}\n\ninterface NumbersProps {\n  confirmed: NumbersObject;\n  deaths: NumbersObject;\n  recovered: NumbersObject;\n}\n\nconst Rows = styled.div`\n  width: 100%;\n  padding-bottom: 2rem;\n  @media only screen and (min-width: 768px) {\n    width: 30rem;\n  }\n`;\n\nconst Row = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 1rem;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  &:not(:last-child) {\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst Numbers: FunctionComponent<NumbersProps> = ({\n  confirmed,\n  deaths,\n  recovered,\n}) => {\n  const { formatMessage } = useIntl();\n  return (\n    <Rows>\n      <h2>\n        <FormattedMessage id=\"site.titles.confirmed\" />\n      </h2>\n      <Row>\n        <NumberBox\n          number={confirmed.all}\n          label={formatMessage({ id: 'numbers.confirmed' })}\n        />\n        <NumberBox\n          number={confirmed.today}\n          label={formatMessage({ id: 'numbers.today' })}\n        />\n      </Row>\n      <h2>\n        <FormattedMessage id=\"site.titles.deaths\" />\n      </h2>\n      <Row>\n        <NumberBox\n          number={deaths.all}\n          label={formatMessage({ id: 'numbers.deaths' })}\n        />\n        <NumberBox\n          number={deaths.today}\n          label={formatMessage({ id: 'numbers.today' })}\n        />\n      </Row>\n      <h2>\n        <FormattedMessage id=\"site.titles.recovered\" />\n      </h2>\n      <Row>\n        <NumberBox\n          number={recovered.all}\n          label={formatMessage({ id: 'numbers.recovered' })}\n        />\n        <NumberBox\n          number={recovered.today}\n          label={formatMessage({ id: 'numbers.today' })}\n        />\n      </Row>\n    </Rows>\n  );\n};\n\nexport default Numbers;\n","import gql from 'graphql-tag';\n\nexport const GET_DATA = gql`\n  query confirmed {\n    data @rest(type: \"Data\", path: \"/\") {\n      confirmed @type(name: \"Confirmed\") {\n        id\n        date\n        healthCareDistrict\n        infectionSourceCountry\n        infectionSource\n      }\n      deaths @type(name: \"Deaths\") {\n        id\n        date\n      }\n      recovered @type(name: \"Recovered\") {\n        id\n        date\n      }\n    }\n  }\n`;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Footer from './Footer';\nimport Charts from './Charts/Charts';\nimport styled from 'styled-components';\nimport Numbers from './Numbers';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_DATA } from '../graphql/queries';\nimport isToday from 'date-fns/isToday';\nimport { Confirmed, Death, Recovered } from '../interfaces';\n\ninterface RootProps {\n  changeLocale: () => void;\n}\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  width: 100%;\n  @media only screen and (min-width: 1000px) {\n    width: 50rem;\n  }\n`;\n\nconst Main = styled.main`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  margin: 2rem 1rem 2rem 1rem;\n  width: 80%;\n  @media only screen and (min-width: 1000px) {\n    width: 50rem;\n  }\n`;\n\nconst ButtonGroup = styled.div`\n  margin: 0 1rem 0 1rem;\n`;\n\ninterface GroupButtonProps {\n  active: boolean;\n}\n\nconst GroupButton = styled.button<GroupButtonProps>`\n  background-color: ${props => (props.active ? '#e4e3d3' : '#2e2d4d')};\n  border: 0.125rem solid #e4e3d3;\n  color: ${props => (props.active ? '#2e2d4d' : '#e4e3d3')};\n  padding: 1rem;\n  width: 4rem;\n  &:first-child {\n    border-radius: 0.5rem 0 0 0.5rem;\n    border-right: none;\n  }\n\n  &:last-child {\n    border-radius: 0 0.5rem 0.5rem 0;\n    border-left: none;\n  }\n`;\n\nconst NotificationBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  line-height: 1.5rem;\n  align-items: center;\n  background-color: #222139;\n  padding: 2rem;\n  width: 80%;\n  margin: 2rem 1rem 2rem 1rem;\n  @media only screen and (min-width: 768px) {\n    width: 26rem;\n  }\n`;\n\nconst Root: FunctionComponent<RootProps> = ({ changeLocale }) => {\n  const { locale } = useIntl();\n  const { data } = useQuery(GET_DATA);\n  const handleLocaleChange = () => {\n    changeLocale();\n  };\n\n  return (\n    <>\n      <Header>\n        <ButtonGroup>\n          <GroupButton onClick={handleLocaleChange} active={locale === 'fi'}>\n            FI\n          </GroupButton>\n          <GroupButton onClick={handleLocaleChange} active={locale === 'en'}>\n            EN\n          </GroupButton>\n        </ButtonGroup>\n      </Header>\n      <Main>\n        <h1>\n          <FormattedMessage id=\"site.title\" />\n        </h1>\n        <NotificationBox>\n          <p>\n            <FormattedMessage id=\"site.notification\" />\n          </p>\n          <p>\n            {locale === 'en' ? (\n              <a href=\"https://yle.fi/uutiset/osasto/news/hus_coronavirus_testing_to_focus_on_health_professionals/11257869\">\n                HUS: Coronavirus testing to focus on health professionals - YLE\n              </a>\n            ) : (\n              <a href=\"https://www.hs.fi/kotimaa/art-2000006440293.html\">\n                Testaus­tavan muutos Husissa vähensi havaittuja tartuntoja\n                sunnuntaina – Suomi tartunnoissa yhä Pohjois­maiden tahdissa -\n                HS\n              </a>\n            )}\n          </p>\n        </NotificationBox>\n        {data && (\n          <>\n            <Numbers\n              confirmed={{\n                all: data.data.confirmed.length,\n                today: data.data.confirmed.filter((item: Confirmed) =>\n                  isToday(new Date(item.date))\n                ).length,\n              }}\n              deaths={{\n                all: data.data.deaths.length,\n                today: data.data.deaths.filter((item: Death) =>\n                  isToday(new Date(item.date))\n                ).length,\n              }}\n              recovered={{\n                all: data.data.recovered.length,\n                today: data.data.recovered.filter((item: Recovered) =>\n                  isToday(new Date(item.date))\n                ).length,\n              }}\n            />\n            <Charts data={data.data} />\n          </>\n        )}\n      </Main>\n      <Footer />\n    </>\n  );\n};\n\nexport default Root;\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { RestLink } from 'apollo-link-rest';\n\nconst cache = new InMemoryCache();\n\nconst restLink = new RestLink({\n  uri:\n    'https://w3qa5ydb4l.execute-api.eu-west-1.amazonaws.com/prod/finnishCoronaData',\n});\n\nconst client = new ApolloClient({\n  link: restLink,\n  cache,\n});\n\nexport default client;\n","import React, { useState } from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { IntlProvider } from 'react-intl';\nimport Root from './components/Root';\nimport en from './translations/en.json';\nimport fi from './translations/fi.json';\nimport client from './graphql/apolloSetup';\n\nconst translations = {\n  en,\n  fi,\n};\n\ntype LocaleType = 'en' | 'fi';\n\nconst App = () => {\n  const localeFromLocalStorage = localStorage.getItem('locale');\n  const localeToSet =\n    localeFromLocalStorage === 'en' || localeFromLocalStorage === 'fi'\n      ? localeFromLocalStorage\n      : 'fi';\n  const [locale, setLocale] = useState<LocaleType>(localeToSet);\n  const hanldeLocaleChange = () => {\n    localStorage.setItem('locale', locale === 'en' ? 'fi' : 'en');\n    setLocale(locale === 'en' ? 'fi' : 'en');\n  };\n\n  return (\n    <IntlProvider locale={locale} messages={translations[locale]}>\n      <ApolloProvider client={client}>\n        <Root changeLocale={hanldeLocaleChange} />\n      </ApolloProvider>\n    </IntlProvider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}